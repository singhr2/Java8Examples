1. Functional Interfaces (@FunctionalInterface annotation)
------------------------------------------------------------
  * Only 1 Single abstract method (SAM)
  * 0..* default and/or static methods
  
  Note: It is different from 'Marker Interface' which don't have any method at all


2. Functional Interfaces provided by Java 8
------------------------------------------------------------
* Supplier
  
* Consumer

* Function
  public <R> apply(T parameter);

  >> Function Composition: compose(), andThen()
  
  
* Predicate
  boolean test(T t);
  
  e.g., Predicate<String> startsWithA = (text) -> text.startsWith("A");
 
  >> Predicate Composition: and(), or() 
  //example credit: http://tutorials.jenkov.com/java-functional-programming/functional-composition.html#predicate-composition
  Predicate<String> startsWithA = (text) -> text.startsWith("A");
  Predicate<String> endsWithX   = (text) -> text.endsWith("x");
  Predicate<String> composedUsingAnd = startsWithA.and(endsWithX);
  Predicate<String> composedUsingOr = startsWithA.or(endsWithX);

3. Lambda 
------------------------------------------------------------
  * Annonymous function - don't belong to any class, can be passed around methods
  * Lambda Expressions
  * Lambda Functions
  >>
    // Test online using https://www.compilejava.net/
    
    @FunctionalInterface
    interface TestFIa{
      void printMessage(String str);
    }

    @FunctionalInterface
    interface TestFIb{
        void execute(String s1);
    }

    public class HelloWorld{
      public static void main(String... args){
        System.out.println("Welcome");
        
        //Lambda Function
        TestFIa fia = (s) -> {
         System.out.println(s);
        };

        //Lambda Expression
        TestFIb fib = System.out::println;

        //Invoke
        fia.printMessage("Hello World using Lambda Function");
        fib.execute("Hello World using Lambda Expression");
        }
    }


